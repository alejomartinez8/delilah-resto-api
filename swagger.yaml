openapi: 3.0.1
info:
  title: Delilah restó API
  description: This is an API project for Acamica Fullstack Career - 2021
  version: 1.0.0
servers:
  - url: 'http://localhost:4000'
  - url: 'https://delilah-resto-api-am.herokuapp.com/'
tags:
  - name: products
    description: Everything about your Products
  - name: orders
    description: Order of products
  - name: users
    description: Operations about user
paths:
  ############ PRODUCTS ##############
  /products:
    # See all products
    get:
      tags:
        - products
      summary: Finds products
      description: Get all products from Delilah Restó
      operationId: getAll
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        400:
          description: Invalid status value
          content: {}
    # Create a new product
    post:
      tags:
        - products
      summary: Create a new product
      requestBody:
        description: Product object that needs to be added to the store. Only admins can create new products.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: Veggie avocado
              price: 100
              imageUrl: https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg
        required: true
      responses:
        200:
          description: Product create successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  '/products/{productId}':
    # Find product by ID
    get:
      tags:
        - products
      summary: Find product by ID
      description: Returns a single product
      operationId: getById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid Product ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    # Update a product
    put:
      tags:
        - products
      summary: Updates a product
      operationId: update
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: Veggie avocado
              price: 200
              imageUrl: https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg
      responses:
        401:
          $ref: '#/components/responses/Unauthorized'
        '405':
          description: Invalid input
          content: {}
      security:
        - token: []
    # ------ Delete a product ---------
    delete:
      tags:
        - products
      summary: Deletes a product
      operationId: delete
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Product not found
          content: {}
      security:
        - token: []
  # Orders
  /orders:
    # GetAll Orders
    get:
      tags:
        - orders
      summary: Return all orders
      description: Returns an array of orders
      operationId: getAll
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
    # Place an order
    post:
      tags:
        - orders
      summary: Place an order for a product
      operationId: create
      requestBody:
        description: order placed for purchasing the product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  '/orders/{orderId}':
    # Find an order
    get:
      tags:
        - orders
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value. Other
        values will generated exceptions
      operationId: getById
      parameters:
        - name: orderId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Order not found
          content: {}
      security:
        - token: []
    # Delete an order
    delete:
      tags:
        - orders
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: delete
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Order not found
          content: {}
      security:
        - token: []
  /users/register:
    # Create an user
    post:
      tags:
        - users
      summary: Create user
      description: Registration form for users
      operationId: create
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
                username: username
                names: FirstName LastName
                email: example@example.com
                address: Medellin
                phone: 555 555 555
                password: password
        required: true
      responses:
        200:
          description: Register Successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    default: Register Successfully
        400:
          description: Invalid
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/login:
    # Login
    post:
      tags:
        - users
      summary: Logs user into the system
      operationId: login
      requestBody:
        required: true
        description: User information
        content:
          application/json:
            schema:
              example:
                username: username
                password: password
            examples:
              username:
                value:
                  username: username
                  password: password
              email:
                value:
                  eamil: example@example.com
                  password: password
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                example:
                  token: jwt
        400:
          description: Invalid username/password supplied
          content: {}
  /users:
    # Get all users
    get:
      tags:
        - users
      summary: Get all users
      operationId: getAll
      description: Get all user if the user request is Admin
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          description: Invalid status value
          content: {}
      security:
        - token: []
  /users/getUser:
    # Get user
    get:
      tags:
        - users
      summary: Get profile user logged
      operationId: getUser
      responses:  
        200:
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  '/users/{userId}':
    # Get and user by ID
    get:
      tags:
        - users
      summary: Get user by user ID
      operationId: getById
      parameters:
        - name: userId
          in: path
          description: The ID that needs to be fetched. Only admin role can access to this route
          required: true
          schema:
            type: number
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: User not found
          content: {}
      security:
        - token: []
    # Update user
    put:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: update
      parameters:
        - name: userId
          in: path
          description: userId that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: User updtaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user ID supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: User not found
          content: {}
      security:
        - token: []
    # Delete users
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: delete
      parameters:
        - name: userId
          in: path
          description: The userId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
# Components
components:

  # Schemes
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderDate:
          type: string
          format: date-time
        productList:
          type: string
        paymentType:
          type: string
          enum:
            - Cash
            - Transfer
        paymentValue:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - new
            - placed
            - in progress
            - shipped
            - delivered
        userId:
          type: integer
          format: int64
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        names:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
    Product:
      required:
        - name
        - urlImg
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Veggie avocado
        price:
          type: number
          example: 1000
        imageUrl:
          type: string
          example: >-
            https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg
  
  # Security Schemes
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT authorization

  # Respones
  responses:
    Unauthorized:
      description: Unauthorized error
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: Unauthorized - No token provided
        
  
      
  
 

            
