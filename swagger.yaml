openapi: 3.0.1
info:
  title: Delilah restó API
  description: This is an API project for Acamica Fullstack Career - 2021
  version: 1.0.0
servers:
  - url: 'https://delilah-resto-api-am.herokuapp.com/'
  - url: 'http://localhost:4000'
tags:
  - name: products
    description: Everything about your Products
  - name: orders
    description: Order of products
  - name: users
    description: Operations about user
paths:
  ############ PRODUCTS ##############
  /products:
    # See all products
    get:
      tags:
        - products
      summary: Finds products
      description: Get all products from Delilah Restó
      operationId: getAll
      responses:
        200:
          description: successful operation
          content:
            application/json:
              example:
                - id: 4
                  name: Hot Dog
                  price: '5'
                  description: Hot Dog Description
                  imageURL: https://www.vvsupremo.com/wp-content/uploads/2016/02/900X570_Mexican-Style-Hot-Dogs.jpg
                  createdAt: '2021-04-23T04:30:50.000Z'
                  updatedAt: '2021-04-23T04:30:50.000Z'
                - id: 14
                  name: Hamburguer
                  price: 10
                  description: Hamburguer Description
                  imageURL: https://conteudo.imguol.com.br/c/entretenimento/9d/2020/05/26/hamburguer-recheado-na-churrasqueira-1590524861807_v2_450x337.jpg
                  createdAt: '2021-04-23T04:30:50.000Z'
                  updatedAt: '2021-04-23T04:30:50.000Z'
                - id: 24
                  name: Pizza
                  price: 8
                  description: Pizza Description
                  imageURL: https://cdn.colombia.com/sdi/2011/08/25/pizza-margarita-803241.jpg
                  createdAt: '2021-04-23T04:30:50.000Z'
                  updatedAt: '2021-04-23T04:30:50.000Z'
        400:
          $ref: '#/components/responses/BadRequest'
    # Create a new product
    post:
      tags:
        - products
      summary: Create a new product
      requestBody:
        description: Product object that needs to be added to the store. Only admins can create new products.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: Veggie avocado
              price: 100
              imageUrl: https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg
        required: true
      responses:
        200:
          $ref: '#/components/responses/OKProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  '/products/{productId}':
    # Find product by ID
    get:
      tags:
        - products
      summary: Find product by ID
      description: Returns a single product
      operationId: getById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          $ref: '#/components/responses/OKProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
    # Update a product
    put:
      tags:
        - products
      summary: Updates a product
      operationId: update
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: Veggie avocado
              price: 200
              imageUrl: https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg
      responses:
        200:
          $ref: '#/components/responses/OKProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        
      security:
        - token: []
    # ------ Delete a product ---------
    delete:
      tags:
        - products
      summary: Deletes a product
      operationId: delete
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Product deleted successfully
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  ############ Orders ###############
  # GetAll Orders
  /orders:
    get:
      tags:
        - orders
      summary: Return all orders
      description: Returns an array of orders. If your an admin you get All Order, if you're an user you get your own orders.
      operationId: getAll
      responses:
        200:
          description: successful operation
          content:
            application/json:
              example:
                - id: 26
                  orderDate: '2021-04-22T22:01:04.000Z'
                  paymentType: Transfer
                  total: '340'
                  status: end
                  userId: 2
                  createdAt: '2021-04-22T21:59:35.000Z'
                  updatedAt: '2021-04-23T03:35:44.000Z'
                  products:
                  - id: 1
                    name: Hot Dog
                    productOrders:
                      quantity: 20
                  - id: 2
                    name: Pizza
                    productOrders:
                      quantity: 30
                  User:
                    id: 2
                    names: FirstName LastName
                    address: Medellin
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  # Place an order
  /orders/create:
    post:
      tags:
        - orders
      summary: Place an order for a product
      operationId: create
      requestBody:
        description: order placed for purchasing the product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              paymentType: Transfer
              status: new
              userId: 2
              products:
              - id: 1
                quantity: 2
              - id: 2
                quantity: 3  
      responses:
        200:
          $ref: '#/components/responses/OKOrder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  # Find an order
  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value. Other
        values will generated exceptions
      operationId: getById
      parameters:
        - name: orderId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          $ref: '#/components/responses/OKOrder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  # Update an Order
  /orders/update/{orderId}:
    put:
      tags:
        - orders
      summary: Update an order
      description: Updates an order
      operationId: update
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an Order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              status: confirmed
      responses:
        200:
          $ref: '#/components/responses/OKOrder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  # Update a Product in an Order
  /orders/update/product/{orderId}:
    # Add a new product
    post:
      tags:
        - orders
      summary: Add a product in an order
      description: Add a product that doesn't exist in the order
      operationId: addProduct
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                id: 3
                quantity: 3
      responses:
        200:
          $ref: '#/components/responses/OKOrder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
    # Update a new product
    put:
      tags:
        - orders
      summary: Update a product in an order
      description: Update a product that exist in the order
      operationId: updateProduct
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                id: 3
                quantity: 3
                price: 5
      responses:
        200:
          $ref: '#/components/responses/OKOrder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
    # Update a new product
    delete:
      tags:
        - orders
      summary: Delete a product in an order
      description: Update a product that exist in the order
      operationId: deleteProduct
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                id: 3
      responses:
        200:
          $ref: '#/components/responses/OKOrder'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  # Delete an order
  /orders/delete/{orderId}:
    delete:
      tags:
        - orders
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: delete
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        200:
          description: Order deleted successfully
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  # Create an user
  /users/register:
    post:
      tags:
        - users
      summary: Create user
      description: Registration form for users
      operationId: create
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
                username: username
                names: FirstName LastName
                email: example@example.com
                address: Medellin
                phone: 555 555 555
                password: password
      responses:
        200:
          description: Register Successfully
          content: 
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    default: Register Successfully
        400:
          $ref: '#/components/responses/BadRequest'
  /users/login:
    # Login
    post:
      tags:
        - users
      summary: Logs user into the system
      operationId: login
      requestBody:
        required: true
        description: User information
        content:
          application/json:
            schema:
              example:
                username: username
                password: password
            examples:
              username:
                value:
                  username: username
                  password: password
              email:
                value:
                  username: example@example.com
                  password: password
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                example:
                  token: jwt
        400:
          $ref: '#/components/responses/BadRequest'
  /users:
    # Get all users
    get:
      tags:
        - users
      summary: Get all users
      operationId: getAll
      description: Get all user if the user request is Admin
      responses:
        200:
          description: User response OK
          content:
            application/json:
              example:
                - id: 4
                  username: admin
                  names: Admin Profile
                  email: admin@example.com
                  phone: 555 555 555
                  address: Address user
                  role: admin
                  createdAt: '2021-04-23T04:30:50.000Z'
                  updatedAt: '2021-04-23T04:30:50.000Z'
                - id: 14
                  username: user
                  names: User Profile
                  email: user@example.com
                  phone: 555 555 555
                  address: Address user
                  role: user
                  createdAt: '2021-04-23T04:30:50.000Z'
                  updatedAt: '2021-04-23T04:30:50.000Z'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  /users/getProfile:
    # Get user
    get:
      tags:
        - users
      summary: Get profile user logged
      operationId: getProfile
      responses:  
        200:
          $ref: '#/components/responses/OKUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
  '/users/{userId}':
    # Get and user by ID
    get:
      tags:
        - users
      summary: Get user by user ID
      operationId: getById
      parameters:
        - name: userId
          in: path
          description: The ID that needs to be fetched. Only admin role can access to this route
          required: true
          schema:
            type: number
      responses:
        200:
          $ref: '#/components/responses/OKUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
    # Update user
    put:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: update
      parameters:
        - name: userId
          in: path
          description: userId that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
                username: username
                names: FirstName LastName
                email: example@example.com
                address: Medellin
                phone: 333 333 333
                password: password
      responses:
        200:
          $ref: '#/components/responses/OKUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
    # Delete users
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: delete
      parameters:
        - name: userId
          in: path
          description: The userId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - token: []
# Components
components:
  # Schemes
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderDate:
          type: string
          format: date-time
        paymentType:
          type: string
          enum:
            - cash
            - trasnfer
            - credit_card
        paymentValue:
          type: number
          example: 1000
        status:
          type: string
          enum:
            - new
            - confirmed
            - preparing
            - shipping
            - delivered
            - canceled
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        user:
          type: object
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: username
        names:
          type: string
          example: FirstName LastName
        email:
          type: string
          example: username@example.com
        phone:
          type: string
          example: 555 555 555
        password:
          type: string
    Product:
      required:
        - name
        - urlImg
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Veggie avocado
        price:
          type: number
          example: 1000
        description:
          type: string
          example: Product Description
        imageUrl:
          type: string
          example: >-
            https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg
  
  # Security Schemes
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT authorization

  # Respones
  responses:
    Unauthorized:
      description: Unauthorized error
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: Unauthorized - No token provided
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    OKProduct:
      description: Product response OK
      content:
        application/json:
          example:
            id: 1
            name: Hot Dog
            price: '5'
            description: Hot Dog Description
            imageURL: https://www.vvsupremo.com/wp-content/uploads/2016/02/900X570_Mexican-Style-Hot-Dogs.jpg
            createdAt: '2021-04-23T04:25:08.000Z'
            updatedAt: '2021-04-23T04:25:08.000Z'
    OKUser:
      description: User response OK
      content:
        application/json:
          example:
            id: 14
            username: user
            names: User Profile
            email: user@example.com
            phone: 555 555 555
            address: Address user
            role: user
            createdAt: '2021-04-23T04:30:50.000Z'
            updatedAt: '2021-04-23T04:30:50.000Z'
    OKOrder:
      description: Order response OK
      content:
        application/json:
          example:
            id: 26
            orderDate: '2021-04-22T22:01:04.000Z'
            paymentType: Transfer
            total: '340'
            status: end
            userId: 2
            createdAt: '2021-04-22T21:59:35.000Z'
            updatedAt: '2021-04-23T03:35:44.000Z'
            products:
            - id: 1
              name: Hot Dog
              productOrders:
                quantity: 20
            - id: 2
              name: Pizza
              productOrders:
                quantity: 30
            User:
              id: 2
              names: FirstName LastName
              address: Medellin
        
  
      
  
 

            
