{
  "openapi": "3.0.1",
  "info": {
    "title": "Delilah restó API",
    "description": "This is an API project for Acamica Fullstack Career - 2021",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:4000"
    }
  ],
  "tags": [
    {
      "name": "products",
      "description": "Everything about your Products"
    },
    {
      "name": "orders",
      "description": "Access to Delilah Restó orders"
    },
    {
      "name": "users",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": ["products"],
        "summary": "Finds products",
        "description": "Get all products from Delilah Restó",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      },
      "post": {
        "tags": ["products"],
        "summary": "Create a new product",
        "requestBody": {
          "description": "Product object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": ["products"],
        "summary": "Find product by ID",
        "description": "Returns a single product",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Product ID supplied",
            "content": {}
          },
          "404": {
            "description": "Product not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["products"],
        "summary": "Updates a product in the store with form data",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the product"
                  },
                  "price": {
                    "type": "number",
                    "description": "Updated price of the product"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": ["products"],
        "summary": "Deletes a product",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Product not found",
            "content": {}
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "tags": ["orders"],
        "summary": "Returns all orders",
        "description": "Returns a map of orders",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": ["orders"],
        "summary": "Place an order for a product",
        "operationId": "placeOrder",
        "requestBody": {
          "description": "order placed for purchasing the product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order",
            "content": {}
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": ["orders"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of product that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Order not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["orders"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Order not found",
            "content": {}
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "Registration form for users",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid Order",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["users"],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "description": "User information",
          "content": {
            "application/json": {
              "examples": {
                "username": {
                  "value": {
                    "username": "username",
                    "password": "password"
                  }
                },
                "email": {
                  "value": {
                    "eamil": "email",
                    "password": "password"
                  }
                }
              },
              "schema": {
                "example": {
                  "username": "username",
                  "password": "password"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": { "token": "jwt" }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Get all user if the user request is Admin",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "security": [{ "token": [] }]
      }
    },
    "/users/logout": {
      "get": {
        "tags": ["users"],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by user ID",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID that needs to be fetched.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updtaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The userId that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "productList": {
            "type": "string"
          },
          "paymentType": {
            "type": "string",
            "enum": ["Cash", "Transfer"]
          },
          "paymentValue": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": ["new", "placed", "in progress", "shipped", "delivered"]
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "names": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Product": {
        "required": ["name", "urlImg"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "example": "Veggie avocado"
          },
          "price": {
            "type": "number",
            "example": 1000
          },
          "imageUrl": {
            "type": "string",
            "example": "https://californiaavocado.com/wp-content/uploads/2020/07/Mediterranean-Grilled-Veggie-Wrap-with-California.jpeg"
          }
        }
      }
    },
    "securitySchemes": {
      "token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [{ "token": [] }]
}
